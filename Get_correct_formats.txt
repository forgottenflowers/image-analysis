Fiji message at save:
"Stack is larger than 4GB. Most TIFF readers will only open the first image. Use this information to open as raw:
name=Untitled, dir=, width=2648, height=2648, nImages=2048, offset=375, type=ushort, byteOrder=big, format=0, url=, whiteIsZero=f, lutSize=0, comp=1, ranges=null, samples=1"

When dealing with TIFF image stacks larger than 4GB, many standard TIFF readers will only open the first image due to the 4GB file size limitation of the standard TIFF format. To access the entire stack, it's necessary to open the file as raw data and interpret the header information. This approach allows you to bypass the limitations of the TIFF reader and access the individual images within the stack. 
Here's a breakdown of why this happens and how to address it:

Problem:
4GB Limit:
Standard TIFF files use 32-bit offsets, which inherently limit their size to around 4GB. 
BigTIFF:
For larger files, the BigTIFF format, which uses 64-bit offsets, is needed to support files larger than 4GB. 

ImageJ's Behavior:
ImageJ, when saving TIFF stacks larger than 4GB, often uses a non-standard format where it saves a fake TIFF header with the first image and then appends the rest of the image data (as raw data) to the end of the file. 

Reader Limitation:
Many image readers are not designed to handle this non-standard format and will only recognize the initial header, effectively displaying only the first image. 
Solution: Open as Raw
1. Identify the Image Properties:
You'll need to know the image's dimensions (width and height), the number of images (nImages), the data type (e.g., byte, short, float), and byte order (big-endian or little-endian). 
This information is often provided in the log message generated when saving the file or in a separate metadata file. 
For example, ImageJ might provide this information when it saves a large TIFF stack. 
2. Use a Raw Image Reader:
Use a software or script that allows you to open a file as raw data and specify the header information. 
For example, in Matlab, you could use functions like fopen, fread, and reshape to read the raw data and reconstruct the image stack. 
Specialized libraries like TIFFStack (GitHub) DylanMuir/TIFFStack: Support for ImageJ's fake TIF files, when file size is > 4Gb · Issue #7 · DylanMuir/TIFFStack or other tools designed for handling BigTIFFs or raw image data might be necessary. 
3. Handle the File Structure:
If the TIFF stack was saved with a raw data section appended to the end (as is common with ImageJ), you'll need to read the raw data accordingly, potentially skipping the initial TIFF header. 



ImageJ can generally open TIFF files it has created, but it might encounter issues with certain TIFF types, especially those created with specific configurations or those exceeding certain size limitations. ImageJ's own TIFF reader has limitations and might not handle all valid TIFF files correctly, including some that are written by other software. 

ImageJ's TIFF Reader:
ImageJ has a built-in TIFF reader that is known to be fast but has limitations. It may not correctly open some valid TIFF files, especially those with out-of-order planes or those that are very large, according to the ImageJ website. 
"Fake" TIFFs:
ImageJ can create "fake" TIFF files where a single TIFF image is followed by a binary data file, and the whole thing is saved as a TIFF. This can cause issues when trying to open these files in other software or even in ImageJ itself if it's not using its own reader. 

Bio-Formats Plugin:
If you encounter problems opening a TIFF file in ImageJ, it's often recommended to use the Bio-Formats plugin, which is more robust in handling different TIFF variations and other file formats. 
Alternatives:
If you're still having trouble opening a file, other image processing software like GIMP or QuPath might be able to handle it. 


When I try to open this, it opens but probably not the whole thing:
>>>>>>>>>>>>>>>>>>>>>>>>>>>
<Out of memory>
<All available memory (11580MB) has been>
<used. To make more available, use the>
<Edit>Options>Memory & Threads command.>
>>>>>>>>>>>>>>>>>>>>>>>>>>>





A thread:
https://forum.image.sc/t/convert-vff-format-to-tiff/82974
- Hi Curtis, our image processing team needs to import an image sequence in volume or VFF format and save or export as TIFF. How do we do this in ImageJ. We have been using Dragonfly, but were hoping that the ImageJ team could help us do this diectly in ImageJ. Is there a plugin for this perhaps?
- The first thing I would suggest is to try to use Fiji to open your VFF file, then save the resulting image to a TIFF. Fiji comes with Bioformats, which says it can open VFF files, so I’m hopeful that it will be straightforward.
- Hi, I tried to open the image sequence in both ImageJ and Fiji and also tried Bioformats. The software does not recognize .vol or .vgi formats, even using bioformats. Any suggestions?
- are your vgi/vol related to x-ray images processed with VGStudioMax (.vgi some kB, .vol several GB size)? If not, skip reading.

The .vgi is plain text, open it with Drag and Drop to the “>>”-Button (rightmost button) or in any text editor. The *.vol is a binary file, open it with File / Import / Raw… and enter the values you find in the *.vgi:

Image type: search for “bitsperelement”, “datatype” and “data range”, e.g. for “bitsperelement = 16”, “datatype = unsigned integer” and “datarange = 0 65535” you use Image type “16-bit Unsigned”
Width, Height, Number of images: look for “Size” and take the 3 numbers in this line
Offset to first image = 0
Gap between images = 0
Little-endian byte order = ticked
Before saving the tiff take the values in the lines starting with “resolution” and “unit” and set Pixel width / Pixel height / Voxel depth according to these values.

There may be mirroring necessary search for “Mirror = 0 0 0”, if one of these is a 1 the corresponding dimension is mirrored. You need enough memory, at least the size of the *.vol (x × y × z × bit-depth), otherwise open it as virtual stack.

Best regards,
Guenter Pudmich





File>New>Script


how to open the windows command line?
Press the Windows key + r. In the Run box, type cmd, and then click Ok. This opens the Command Prompt window.

cd C:\opt\Fiji.app
ImageJ-win64.exe --ij2 --headless --console --run "C:\Users\shra13\Desktop/hello.py"

For all methods including java, you can refer: https://imagej.net/tutorials/open-an-image

https://imagej.net/scripting/
https://imagej.net/scripting/python
https://imagej.net/scripting/script-editor
https://imagej.net/scripting/headless
https://imagej.net/learn/headless

https://imagej.net/imagej-wiki-static/Jython_Scripting_Examples
https://docs.python.org/3/library/io.html
https://stackoverflow.com/questions/21140840/run-fiji-from-command-line

---------- 11.08.2025 (SuperMicro)

The script so far:

from ij import IJ
imp = IJ.openImage("R:/tomo/Shreya/2505_soleil_recon/055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.tif")
IJ.saveAs(imp, "Tiff", "R:/tomo/Shreya/out.tif")
print("Image saved successfully.")



cd C:\opt\Fiji_Interdent_Oleksandra\Fiji.app
ImageJ-win64_Interdent.exe --ij2 --headless --console --run "C:\Users\sysgen\Desktop\hello.py"

from ij import IJ
imp = IJ.openImage("E:/055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.tif")
IJ.saveAs(imp, "Tiff", "D:/out.tif")
print("Image saved successfully.")

C:\opt\Fiji_Interdent_Oleksandra\Fiji.app>Stack is larger than 4GB. Most TIFF readers will only open the first image. Use this information to open as raw:
name=Untitled, dir=, width=2648, height=2648, nImages=2048, offset=218, gap=0, type=, byteOrder=big, format=0, url=, whiteIsZero=f, lutSize=0, comp=1, ranges=null, samples=1
Image saved successfully.



#Go to Plugins → Macros → Record… (choose "Macro" mode)
run("Raw...", "open=D:/trial_data/055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj/055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.vol image=[16-bit Unsigned] width=2648 height=2648 number=2048 little-endian");
close();


C:\opt\Fiji_Interdent_Oleksandra\Fiji.app>Stack is larger than 4GB. Most TIFF readers will only open the first image. Use this information to open as raw:
name=Untitled, dir=, width=2648, height=2648, nImages=2048, offset=218, gap=0, type=, byteOrder=big, format=0, url=, whiteIsZero=f, lutSize=0, comp=1, ranges=null, samples=1
Image saved successfully.
Time elapsed: 501.14 seconds

---------- 13.08.2025 (RX Recon)
Reading vol info

cd C:\opt\Fiji.app
ImageJ-win64.exe --ij2 --headless --console --run "C:\Users\shra13\Desktop\hello.py"

Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=128m; support was removed in 8.0
Java HotSpot(TM) 64-Bit Server VM warning: Using incremental CMS is deprecated and will likely be removed in a future release
Stack is larger than 4GB. Most TIFF readers will only open the first image. Use this information to open as raw:
name=Untitled, dir=, width=2648, height=2648, nImages=2048, offset=206, type=ushort, byteOrder=big, format=0, url=, whiteIsZero=f, lutSize=0, comp=1, ranges=null, samples=1
Image saved successfully.
Time elapsed: 301.52 seconds

Trying to generate big tiff

out_path_ome = out_path.replace(".tif", ".ome.tif")
IJ.run(imp, "Bio-Formats Exporter", "save="+out_path_ome)

Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=128m; support was removed in 8.0
Java HotSpot(TM) 64-Bit Server VM warning: Using incremental CMS is deprecated and will likely be removed in a future release
Switching to BigTIFF (by file size)
Image saved successfully.
Time elapsed: 1316.64 seconds

---------- 18.08.2025 (RX Recon) Testing looping

cd C:\opt\Fiji.app
ImageJ-win64.exe --ij2 --headless --console --run "C:\Users\shra13\Desktop\hello.py"

Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=128m; support was removed in 8.0
Java HotSpot(TM) 64-Bit Server VM warning: Using incremental CMS is deprecated and will likely be removed in a future release
Stack is larger than 4GB. Most TIFF readers will only open the first image. Use this information to open as raw:
name=Untitled, dir=, width=2648, height=2648, nImages=2048, offset=206, type=ushort, byteOrder=big, format=0, url=, whiteIsZero=f, lutSize=0, comp=1, ranges=null, samples=1
(u'G:/trial_data/055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj/055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.tif', '    Time elapsed: 285.79 seconds')

ok, last line was corrected, now we shall try both



------------- 01.09.2025 (OME Tiffs) (SuperMicro)

Everything worked great and I have all the fake tiffs. Now I try to convert them to OME tiffs using parallel processing on PowerShell.
I have already created a new folder inside C:/opt/ called Fiji_Shreya, and added to the library. (copy this to personal hard drive)
> Just look for and open windows powershell
> Set path to the directory with all the tiff files: cd E:/soleil_recon/trial_data/tiffs
> Copy-paste the main code (with correct paths) to the same directory as well
> Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
  (run to allow script execution for this session only)
> convert_fake_tiffs.ps1

Had to copy paste everything and save as "All files" not .txt files. I think its a Supermicro problem that doesn't allow to view and edit extensions easily.

Next, updating Power Shell, coz 'Parallel' variable wasn't recognized.
https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.5
Ok doesn't work without admin rights. Updating script...

Manually had to edit Java Home environments in the .bat files. Nope doesn't work.

# Set Java for this session
$env:JAVA_HOME = "C:\opt\Fiji_Shreya\Fiji.app\lib"
$env:PATH = "$env:JAVA_HOME\bin;$env:PATH"
# Optional: test
java -version
# Now run bioformats2raw
& "C:\tools\bioformats2raw\bin\bioformats2raw.bat" "E:\YourDataFolder\example_fake.tif" "E:\YourDataFolder\example.zarr"

Get-ChildItem
(useful command)

fail fail fail until:
& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -version

openjdk version "1.8.0_322"
OpenJDK Runtime Environment (Zulu 8.60.0.21-CA-win64) (build 1.8.0_322-b06)
OpenJDK 64-Bit Server VM (Zulu 8.60.0.21-CA-win64) (build 25.322-b06, mixed mode)

------------- 09.09.2025 (OME Tiffs) (SuperMicro)

PS C:\Users\sysgen> cd
PS C:\Users\sysgen> cd Desktop
PS C:\Users\sysgen\Desktop> Get-ChildItem

& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -cp "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\*;C:\opt\Fiji_Shreya\Fiji.app\jars\*;" loci.formats.tools.ImageConverter "C:\Users\sysgen\Desktop\055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.tif" "C:\Users\sysgen\Desktop\\converted.ome.tif"

Error: Could not find or load main class loci.formats.tools.ImageConverter

& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -cp "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\*;C:\opt\Fiji_Shreya\Fiji.app\jars\*;" loci.formats.tools.ImageConverter 

Error: Could not find or load main class loci.formats.tools.ImageConverter

Downloaded bioformats_package.jar from here (https://downloads.openmicroscopy.org/bio-formats/8.3.0/artifacts/)

& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -jar "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\bioformats_package.jar" "C:\Users\sysgen\Desktop\055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.tif" "C:\Users\sysgen\Desktop\converted.ome.tif"

The bio-formats viewer is now open and I cannot see any saved coverted.ome.tif. Well at least this shows the bioformat now works?

Exception in thread "main" java.lang.OutOfMemoryError: Java heap space.

To check things are wired up correctly before using the command, run
& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -cp "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\bioformats_package.jar"  loci.formats.tools.BfConvert

Error: Could not find or load main class loci ...
(initially there was problem with which files to unzip. Finally, you can see the ones in my Fiji (the others are still zipped. And by date you can find which ones were downloaded today.)

We need all jars, so

& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -cp "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\*;C:\opt\Fiji_Shreya\Fiji.app\jars\*" loci.formats.tools.BfConvert

Error: Could not find or load ..

But this works:

& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -cp "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\*;C:\opt\Fiji_Shreya\Fiji.app\jars\*" loci.formats.tools.ImageConverter

To convert a file between formats, run:
  bfconvert [-debug] [-stitch] [-separate] [-merge] [-expand]
    [-bigtiff] [-nobigtiff] [-compression codec] [-series series] [-noflat]
    [-cache] [-cache-dir dir] [-no-sas]
    [-map id] [-range start end] [-crop x,y,w,h]
    [-channel channel] [-z Z] [-timepoint timepoint] [-nogroup]
    [-nolookup] [-autoscale] [-version] [-no-upgrade] [-padded]
    [-option key value] [-novalid] [-validate] [-tilex tileSizeX]
    [-tiley tileSizeY] [-pyramid-scale scale]
    [-swap dimensionsOrderString] [-fill color]
    [-precompressed] [-quality compressionQuality]
    [-pyramid-resolutions numResolutionLevels] in_file out_file

            -version: print the library version and exit
         -no-upgrade: do not perform the upgrade check
              -debug: turn on debugging output
             -stitch: stitch input files with similar names
           -separate: split RGB images into separate channels
              -merge: combine separate channels into RGB image
             -expand: expand indexed color to RGB
            -bigtiff: force BigTIFF files to be written
          -nobigtiff: do not automatically switch to BigTIFF
        -compression: specify the codec to use when saving images
             -series: specify which image series to convert
             -noflat: do not flatten subresolutions
              -cache: cache the initialized reader
          -cache-dir: use the specified directory to store the cached
                      initialized reader. If unspecified, the cached reader
                      will be stored under the same folder as the image file
             -no-sas: do not preserve the OME-XML StructuredAnnotation elements
                -map: specify file on disk to which name should be mapped
              -range: specify range of planes to convert (inclusive)
            -nogroup: force multi-file datasets to be read as individual                      files
           -nolookup: disable the conversion of lookup tables
          -autoscale: automatically adjust brightness and contrast before
                      converting; this may mean that the original pixel
                      values are not preserved
          -overwrite: always overwrite the output file, if it already exists
        -nooverwrite: never overwrite the output file, if it already exists
               -crop: crop images before converting; argument is 'x,y,w,h'
            -channel: only convert the specified channel (indexed from 0)
                  -z: only convert the specified Z section (indexed from 0)
          -timepoint: only convert the specified timepoint (indexed from 0)
             -padded: filename indexes for series, z, c and t will be zero padded
             -option: add the specified key/value pair to the options list
            -novalid: will not validate the OME-XML for the output file
           -validate: will validate the generated OME-XML for the output file
              -tilex: image will be converted one tile at a time using the given tile width
              -tiley: image will be converted one tile at a time using the given tile height
      -pyramid-scale: generates a pyramid image with each subsequent resolution level divided by scale
-pyramid-resolutions: generates a pyramid image with the given number of resolution levels
      -no-sequential: do not assume that planes are written in sequential order
               -swap: override the default input dimension order; argument is f.i. XYCTZ
               -fill: byte value to use for undefined pixels (0-255)
      -precompressed: transfer compressed bytes from input dataset directly to output.
                      Most input and output formats do not support this option.
                      Do not use -crop, -fill, or -autoscale, or pyramid generation options
                      with this option.
            -quality: double quality value for JPEG compression (0-1)

The extension of the output file specifies the file format to use
for the conversion. The list of available formats and extensions is:

 * Animated PNG: .png
 * Audio Video Interleave: .avi
 * CellH5 File Format: .ch5
 * DICOM: .dcm
 * Encapsulated PostScript: .eps, .epsi
 * Image Cytometry Standard: .ids, .ics
 * JPEG: .jpg, .jpeg, .jpe
 * JPEG-2000: .jp2
 * Java source code: .java
 * OME-TIFF: .ome.tif, .ome.tiff, .ome.tf2, .ome.tf8, .ome.btf
 * OME-XML: .ome, .ome.xml
 * QuickTime: .mov
 * Tagged Image File Format: .tif, .tiff, .tf2, .tf8, .btf
 * Vaa3d: .v3draw

Some file formats offer multiple compression schemes that can be set
using the -compression option. The list of available compressions is:

 * DICOM: Uncompressed, JPEG, JPEG-2000
 * JPEG-2000: JPEG-2000 Lossy, JPEG-2000
 * OME-TIFF: Uncompressed, LZW, JPEG-2000, JPEG-2000 Lossy, JPEG, zlib
 * OME-XML: Uncompressed, zlib
 * QuickTime: Uncompressed
 * Tagged Image File Format: Uncompressed, LZW, JPEG-2000, JPEG-2000 Lossy, JPEG, zlib

If any of the following patterns are present in out_file, they will
be replaced with the indicated metadata value from the input file.

   Pattern:     Metadata value:
   ---------------------------
   %s           series index
   %n           series name
   %c           channel index
   %w           channel name
   %z           Z index
   %t           T index
   %A           acquisition timestamp
   %x           row index of the tile
   %y           column index of the tile
   %m           overall tile index

If any of these patterns are present, then the images to be saved
will be split into multiple files.  For example, if the input file
contains 5 Z sections and 3 timepoints, and out_file is

  converted_Z%z_T%t.tiff

then 15 files will be created, with the names

  converted_Z0_T0.tiff
  converted_Z0_T1.tiff
  converted_Z0_T2.tiff
  converted_Z1_T0.tiff
  ...
  converted_Z4_T2.tiff

Each file would have a single image plane.

Ok so now back to the original command:
& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -cp "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\*;C:\opt\Fiji_Shreya\Fiji.app\jars\*;" loci.formats.tools.ImageConverter "C:\Users\sysgen\Desktop\055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.tif" "C:\Users\sysgen\Desktop\converted.ome.tif"

It works very well! Tested in Amira. Now testing a different path (in shared drive)...

& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -cp "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\*;C:\opt\Fiji_Shreya\Fiji.app\jars\*;" loci.formats.tools.ImageConverter "T:\tomo\Shreya\2505_soleil_recon_FijiTIFfiles\055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.tif" "T:\tomo\Shreya\2505_soleil_recon_OMEfiles\055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.ome.tif"

Ok it seems like it's gonna work. So next task, loop through all files in the folder and generate corresponding files with same name. 
But OMG this is so slow. I will try to increase the memory in the next step, but before that let's check what the RAM is...

(Get-CimInstance -ClassName Win32_ComputerSystem).TotalPhysicalMemory / 1GB
Whoa! It's huuuge....   1023.66285324097 GB

I can increase the RAM but the bottleneck seems to be the network speed. So, I won't do the pseudo-parallel processing and instead create temporary files locally, compress them and then copy them over the network.
Apparently, it might even be faster for Amira because although it would use more CPU to decompress on the fly, it's the network which was taking so long.
Ok I copy pasted code on C:\opt, as just C: is not allowed. Now let's see...
"Navigate to the folder where you saved the script"



I am testing a temporary source folder with 2 tiffs, in the same directory, and the ps1 file in the C: drive. Will call from Powershell.




------------- 15.09.2025 (OME Tiffs) (SuperMicro)

cd ../..

& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -cp "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\*;C:\opt\Fiji_Shreya\Fiji.app\jars\*;" loci.formats.tools.ImageConverter "T:\tomo\Shreya\2505_soleil_recon_FijiTIFfiles\055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.tif" "T:\tomo\Shreya\2505_soleil_recon_OMEfiles\055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.ome.tif"

do it for: 004_pv005_tip_2x_3p1um_30ms_25cm_45keV_gap6p7mm_0_16b

& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -cp "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\*;C:\opt\Fiji_Shreya\Fiji.app\jars\*;" loci.formats.tools.ImageConverter "T:\tomo\Shreya\2505_soleil_recon_FijiTIFfiles\004_pv005_tip_2x_3p1um_30ms_25cm_45keV_gap6p7mm_0_16b.tif" "T:\tomo\Shreya\2505_soleil_recon_OMEfiles\004_pv005_tip_2x_3p1um_30ms_25cm_45keV_gap6p7mm_0_16b.ome.tif"

[done]
2811.961s elapsed (335.80713+1014.16797ms per plane, 6153ms overhead)

Now I'm gonna try LZW lossless compression for the original (055) to compare and check if Amira picks it (might need more calculation from AMira I guess but that might not be such a big problem). I'm saving directly in my drive (also to avoid output filename conflict):

& "C:\opt\Fiji_Shreya\Fiji.app\java\win64\zulu8.60.0.21-ca-fx-jdk8.0.322-win_x64\jre\bin\java.exe" -cp "C:\opt\Fiji_Shreya\Fiji.app\jars\bio-formats\*;C:\opt\Fiji_Shreya\Fiji.app\jars\*;" loci.formats.tools.ImageConverter -compression LZW "T:\tomo\Shreya\2505_soleil_recon_FijiTIFfiles\055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.tif" "E:\soleil_recon\055_pv036_tip_2x_3p08_30ms_HA_250mm_45keV_gap6p7mm_Cu0p45_3900prj_0_16b.ome.tif"

Oh lol but to make it faster, it probably should be saved locally first in a temp file and then sent over the network, no? Anyway, let's see first whether Amira accepts this or not.

[done]
1565.763s elapsed (185.76807+573.68506ms per plane, 5734ms overhead)
but sizes are like 28,133,670 KB vs 26,644,651 KB (28 GB vs 26 GB) - is it worth it?
28,047,617 KB was the imageJ fake tiff size. Hmm... I think not worth it.
I mean this kind of compression wouldn't even affect the network speed! Which was the goal in the first place!

⚖️ Is it worth it?
Yes, if:
- You’re archiving huge datasets long-term and every % matters (e.g., petabytes of storage).
- You want to standardize on OME-TIFF with compression enabled for interoperability (many facilities do this just to have a consistent policy).
- You might later switch to stronger compression (like JPEG-2000 lossless or Zlib/ZIP) but want the option to recompress without changing the pipeline.

No, if:
- Disk space isn’t an issue (you’ve got plenty of storage).
- The extra CPU time to compress/decompress slightly slows down workflows but doesn’t give meaningful size savings.
- You mainly care about read/write speed — uncompressed OME-TIFF is faster to load in Fiji/OME tools than compressed.

If the goal is saving more space (but still lossless):
Try -compression JPEG-2000 or -compression ZIP in ImageConverter — sometimes they shrink high-entropy scientific images better than LZW.

Does Amira accept the compressed file?


In the meantime, I check the performance of the ps1 script with 006:   ---> convert_imajeJ_tif_to_ome_single

powershell -ExecutionPolicy Bypass -File "C:\Users\sysgen\Desktop\convert.ps1"

[done]
2533.562s elapsed (306.30225+907.77686ms per plane, 5522ms overhead)

Now, try with multiple files in folder (for now, I put only 3 files in that folder)    ---> convert_imajeJ_tif_to_ome

powershell -ExecutionPolicy Bypass -File "C:\Users\sysgen\Desktop\convert_all.ps1"



